
# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session
/kaggle/input/advertisingcsv/Advertising.csv
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt 
import seaborn as sns
import plotly.express as px
df = pd.read_csv('/kaggle/input/advertisingcsv/Advertising.csv')
df
Unnamed: 0	TV	Radio	Newspaper	Sales
0	1	230.1	37.8	69.2	22.1
1	2	44.5	39.3	45.1	10.4
2	3	17.2	45.9	69.3	9.3
3	4	151.5	41.3	58.5	18.5
4	5	180.8	10.8	58.4	12.9
...	...	...	...	...	...
195	196	38.2	3.7	13.8	7.6
196	197	94.2	4.9	8.1	9.7
197	198	177.0	9.3	6.4	12.8
198	199	283.6	42.0	66.2	25.5
199	200	232.1	8.6	8.7	13.4
200 rows Ã— 5 columns

df.head()
Unnamed: 0	TV	Radio	Newspaper	Sales
0	1	230.1	37.8	69.2	22.1
1	2	44.5	39.3	45.1	10.4
2	3	17.2	45.9	69.3	9.3
3	4	151.5	41.3	58.5	18.5
4	5	180.8	10.8	58.4	12.9
df.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 200 entries, 0 to 199
Data columns (total 5 columns):
 #   Column      Non-Null Count  Dtype  
---  ------      --------------  -----  
 0   Unnamed: 0  200 non-null    int64  
 1   TV          200 non-null    float64
 2   Radio       200 non-null    float64
 3   Newspaper   200 non-null    float64
 4   Sales       200 non-null    float64
dtypes: float64(4), int64(1)
memory usage: 7.9 KB
df.columns
Index(['Unnamed: 0', 'TV', 'Radio', 'Newspaper', 'Sales'], dtype='object')
df.describe()
Unnamed: 0	TV	Radio	Newspaper	Sales
count	200.000000	200.000000	200.000000	200.000000	200.000000
mean	100.500000	147.042500	23.264000	30.554000	14.022500
std	57.879185	85.854236	14.846809	21.778621	5.217457
min	1.000000	0.700000	0.000000	0.300000	1.600000
25%	50.750000	74.375000	9.975000	12.750000	10.375000
50%	100.500000	149.750000	22.900000	25.750000	12.900000
75%	150.250000	218.825000	36.525000	45.100000	17.400000
max	200.000000	296.400000	49.600000	114.000000	27.000000
df.isnull().sum()
Unnamed: 0    0
TV            0
Radio         0
Newspaper     0
Sales         0
dtype: int64
sns.pairplot(df)
plt.show()
/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):

sns.pairplot(df, x_vars=['TV','Radio','Newspaper'], y_vars='Sales',  kind='scatter')
plt.show()

sns.pairplot(df, x_vars=['TV','Radio','Newspaper'], y_vars='Sales',  kind='reg')
plt.show()

sns.heatmap(df.corr(),annot=True)
plt.show()

TRAIN-TEST SPLIT
When only TV is compared against Sales
When Tv and Radio are compared against Sales
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(df[['TV']],df[['Sales']],test_size=0.3,random_state=0)
from sklearn.model_selection import train_test_split
x1_train,x1_test,y1_train,y1_test = train_test_split(df[['TV','Radio']],df[['Sales']],test_size=0.3,random_state=0)
MODEL BUILDING and PREDICTIONS
When only TV is compared against Sales
When Tv and Radio are compared against Sales
WHEN TV IS COMPARED AGAINST SALES
from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(x_train,y_train)
LinearRegression()
In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook.
On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.
res = model.predict(x_test)
from sklearn.metrics import mean_squared_error
mse = mean_squared_error(y_test, res)
rmse = np.sqrt(mse)
mse
7.497479593464674
rmse
2.7381525876883988
from sklearn.metrics import r2_score
r2 = r2_score(y_test, res)
r2
0.725606346597073
WHEN BOTH TV AND RADIO ARE COMPARED AGAINST SALES
from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(x1_train,y1_train)
LinearRegression()
In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook.
On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.
res = model.predict(x1_test)
from sklearn.metrics import mean_squared_error
mse = mean_squared_error(y1_test, res)
rmse = np.sqrt(mse)
mse
3.6708096754914963
rmse
1.9159357179956473
from sklearn.metrics import r2_score
r2 = r2_score(y1_test, res)
r2
0.8656552691810044
RESULTS
We can observe that while predicting the Sales using both the TV and Radio as Features improves the R2-score.
